import { useState, useEffect } from "react"
import {
  Check,
  Code,
  Download,
  ExternalLink,
  MessageSquare,
  ThumbsDown,
  ThumbsUp,
} from "lucide-react"

import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"

function formatReviewText(text, type = "general") {
  const lines = text.split(/\n\s*/).filter(item => item.trim() !== "");

  if (type === "summary") {
    return (
      <ul className="list-disc pl-5 text-muted-foreground space-y-1">
        {lines.flatMap((line, i) =>
          line
            .split(/\d+\.\s+/)
            .filter(Boolean)
            .flatMap(part => part.split(/\s*-\s+/))
            .filter(Boolean)
            .map((point, j) => (
              <li key={`summary-${i}-${j}`} className="text-sm leading-relaxed">
                {point.trim().replace(/\*\*(.+?)\*\*/g, "$1")}
              </li>
            ))
        )}
      </ul>
    );
  }

  const introLines = [];
  const suggestionItems = [];
  let isInSuggestions = false;
  let isPastSuggestions = false;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const isSuggestionLine = /^\d+\.\s+(\*\*.+\*\*:)/.test(line);

    if (isSuggestionLine) {
      isInSuggestions = true;
    } else if (isInSuggestions && !isSuggestionLine) {
      isPastSuggestions = true;
    }

    if (!isInSuggestions && !isPastSuggestions) {
      introLines.push(line);
    } else if (isInSuggestions && !isPastSuggestions) {
      suggestionItems.push(line);
    }
  }

  return (
    <div className="space-y-4">
      {introLines.length > 0 && (
        <div className="text-muted-foreground space-y-1">
          {introLines.map((line, i) => (
            <p key={`intro-${i}`}>{line}</p>
          ))}
        </div>
      )}
      {suggestionItems.length > 0 && (
        <ol className="list-decimal pl-5 space-y-1">
          {suggestionItems.map((item, index) => {
            const cleanItem = item.replace(/\*\*(.+?)\*\*/g, "$1");
            const cleaned = cleanItem.replace(/^\d+\.\s*/, "");
            const parts = cleaned.split(":");
            const titlePart = parts[0] ? `<span class=\"font-semibold\">${parts[0].trim()}</span>` : "";
            const rest = parts[1] ? parts.slice(1).join(":") : "";
            const highlighted = rest.replace(/`([^`]+)`/g, '<code class="bg-blue-100 text-blue-700 px-1 py-0.5 rounded text-sm font-mono">$1</code>');
            return (
              <li key={index} className="mb-2 text-sm leading-relaxed" dangerouslySetInnerHTML={{ __html: `${titlePart}: ${highlighted}` }} />
            );
          })}
        </ol>
      )}
    </div>
  );
}

export function ReviewDetails({ reviewId }) {
  const [activeTab, setActiveTab] = useState("discussion")
  const [comment, setComment] = useState("")
  const [review, setReview] = useState(null)

  useEffect(() => {
    const stored = localStorage.getItem("latestReview")
    if (stored) {
      setReview(JSON.parse(stored))
    }
  }, [])

  if (!review) return <div className="text-muted-foreground">No review data found.</div>

  const getAgentColor = (agent) => {
    switch (agent) {
      case "security":
        return "bg-blue-100 text-blue-500"
      case "performance":
        return "bg-purple-100 text-purple-500"
      case "ux":
        return "bg-green-100 text-green-500"
      default:
        return "bg-gray-100 text-gray-500"
    }
  }

  const getSeverityColor = (severity) => {
    switch (severity) {
      case "High":
        return "bg-red-100 text-red-500 border-red-200"
      case "Medium":
        return "bg-orange-100 text-orange-500 border-orange-200"
      case "Low":
        return "bg-yellow-100 text-yellow-500 border-yellow-200"
      default:
        return "bg-gray-100 text-gray-500 border-gray-200"
    }
  }

  const getAgentInitial = (agent) => agent.charAt(0).toUpperCase()

  const handleCommentSubmit = (e) => {
    e.preventDefault()
    setComment("")
  }

  return (
    <>
      <CardHeader>
        <CardTitle>Latest Code Review</CardTitle>
        <CardDescription>Generated by Claude</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <h3 className="font-semibold text-lg">üîê Security Suggestions</h3>
          {formatReviewText(review.security, "general")}
        </div>
        <div>
          <h3 className="font-semibold text-lg">üé® UX Suggestions</h3>
          {formatReviewText(review.ux, "general")}
        </div>
        <div>
          <h3 className="font-semibold text-lg">‚ö° Performance Suggestions</h3>
          {formatReviewText(review.performance, "general")}
        </div>
        <div className="bg-muted p-4 rounded">
          <h3 className="font-semibold">üìå Summary</h3>
          {formatReviewText(review.summary, "summary")}
        </div>
      </CardContent>
    </>
  )
}



// import React from "react";
// import ReviewResult from "@/components/ReviewResult"

// export function formatReviewText(text) {
//     const lines = text.split("\n").filter(Boolean);
  
//     const introLines = [];
//     const suggestionItems = [];
//     const summaryLines = [];
  
//     let isInSuggestions = false;
//     let isPastSuggestions = false;
  
//     for (let i = 0; i < lines.length; i++) {
//       const line = lines[i];
  
//       const isSuggestionLine = /^\d+\.\s+(\*\*.+\*\*:)/.test(line);
  
//       if (isSuggestionLine) {
//         isInSuggestions = true;
//       } else if (isInSuggestions && !isSuggestionLine) {
//         isPastSuggestions = true;
//       }
  
//       if (!isInSuggestions && !isPastSuggestions) {
//         introLines.push(line);
//       } else if (isInSuggestions && !isPastSuggestions) {
//         suggestionItems.push(line);
//       } else if (isPastSuggestions) {
//         summaryLines.push(line);
//       }
//     }
  
//     return (
//       <div className="space-y-4">
//         {/* Intro text */}
//         {introLines.length > 0 && (
//           <div className="text-muted-foreground space-y-1">
//             {introLines.map((line, i) => (
//               <p key={`intro-${i}`}>{line}</p>
//             ))}
//           </div>
//         )}
  
//         {/* Suggestions */}
//         <ol className="list-decimal pl-5 space-y-1">
//           {suggestionItems.map((line, i) => {
//             const match = line.match(/^\d+\.\s+\*\*(.+?)\*\*:\s*(.*)/);
//             if (match) {
//               const title = match[1];
//               const rest = match[2].replace(/`([^`]+)`/g, "<code class='bg-muted px-1 py-0.5 rounded text-sm font-mono text-blue-600'>$1</code>");
//               return (
//                 <li key={`suggestion-${i}`}>
//                   <span className="font-semibold">{title}</span>:{" "}
//                   <span dangerouslySetInnerHTML={{ __html: rest }} />
//                 </li>
//               );
//             } else {
//               return <li key={`suggestion-${i}`}>{line}</li>;
//             }
//           })}
//         </ol>
  
//         {/* Summary */}
//         {summaryLines.length > 0 && (
//           <div className="text-muted-foreground space-y-1">
//             {summaryLines.map((line, i) => (
//               <p key={`summary-${i}`}>{line}</p>
//             ))}
//           </div>
//         )}
//       </div>
//     );
//   }
  

// export default function ReviewResult({ suggestions }) {
//   return (
//     <div className="space-y-4">
//       <h2 className="text-xl font-bold">üîç Suggestions</h2>
//       <ol className="list-decimal pl-5">
//         {formatReviewText(suggestions)}
//       </ol>
//     </div>
//   );
// }
